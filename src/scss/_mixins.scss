// Импорт переменных
@use 'variables' as *;
@use 'sass:map';

// Функция для получения значения из темы кнопки
@function get-theme-value($theme, $property, $state: default) {
  @return map.get($button-themes, $theme, $property, $state);
}

// Функция для получения значения размера кнопки
@function get-size-value($size, $property) {
  @return map.get($button-sizes, $size, $property);
}

// Миксин для базовых стилей кнопки
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: $gap-between-elements;
  border: none;
  cursor: pointer;
  font-family: $font-family;
  text-decoration: none;
  transition: all $transition-duration $transition-timing;
  position: relative;
  user-select: none;

  &:focus-visible {
    outline: $focus-outline-width solid $focus-stroke;
    outline-offset: 0;
  }

  &:focus:not(:focus-visible) {
    outline: none;
  }

  &:disabled {
    cursor: not-allowed;
    background-color: $disabled-bg !important;
    color: $disabled-text !important;

    .button__icon {
      fill: $disabled-text !important;
    }

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      background-color: $disabled-bg !important;
      color: $disabled-text !important;
      outline: none !important;
    }
  }
}

// Универсальный миксин для размеров кнопки
@mixin button-size($size) {
  height: get-size-value($size, height);
  padding: get-size-value($size, padding);
  border-radius: get-size-value($size, border-radius);
  font-weight: get-size-value($size, font-weight);
  font-size: get-size-value($size, font-size);
  line-height: get-size-value($size, line-height);
}

// Универсальный миксин для цвета кнопки (оптимизированный)
@mixin button-color($theme) {
  background-color: get-theme-value($theme, bg, default);
  color: get-theme-value($theme, text, default);

  .button__icon {
    fill: get-theme-value($theme, text, default);
  }

  // Для bg используем interactive (так как hover, press, focus одинаковые)
  &:hover:not(:disabled),
  &:focus-visible:not(:disabled) {
    background-color: get-theme-value($theme, bg, interactive);
    color: get-theme-value($theme, text, hover);

    .button__icon {
      fill: get-theme-value($theme, text, hover);
    }
  }

  &:active:not(:disabled) {
    background-color: get-theme-value($theme, bg, interactive);
    color: get-theme-value($theme, text, press);

    .button__icon {
      fill: get-theme-value($theme, text, press);
    }
  }
}

// Комплексный миксин для создания полной кнопки одной строкой
@mixin button($size: m, $theme: primary) {
  @include button-base;
  @include button-size($size);
  @include button-color($theme);
}

// Утилитарные миксины для переиспользования
@mixin card-shadow {
  box-shadow: $box-shadow-card;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin text-truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// Responsive миксин для spacing
@mixin spacing($property, $size) {
  #{$property}: map.get((
    xs: $spacing-xs,
    s: $spacing-s,
    m: $spacing-m,
    l: $spacing-l
  ), $size);
}
